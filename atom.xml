<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Diary of a Chump]]></title>
  <subtitle><![CDATA[sdgluck's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="sdgluck.github.io//"/>
  <updated>2015-08-12T16:23:24.884Z</updated>
  <id>sdgluck.github.io//</id>
  
  <author>
    <name><![CDATA[Sam Gluck]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[What is a Key Mirror?]]></title>
    <link href="sdgluck.github.io/2015/08/12/key-mirrors/"/>
    <id>sdgluck.github.io/2015/08/12/key-mirrors/</id>
    <published>2015-08-12T16:16:00.000Z</published>
    <updated>2015-08-12T16:23:24.884Z</updated>
    <content type="html"><![CDATA[<p>It is very likely that in your day-to-day JavaScript programming you will have encountered the problem that is ‘how can I maintain a collection of constants in the form of string literals, and reference these strings by a name?’ If you have posed this question, and are still waiting for an answer, then I am happy to give it to you: key mirrors.</p>
<h2 id="What_is_a_key_mirror?">What is a key mirror?</h2><p>A key mirror is an object where for each property, the key is the same as the value. They are most useful as a collection of constants that ‘give back’ their own definition, and many languages already provide an integrated solution for this behaviour in the form of an <a href="https://en.wikipedia.org/wiki/Enumerated_type" target="_blank" rel="external">enum</a>. Unfortunately, JavaScript doesn’t… so we use ‘key mirrors’ instead.</p>
<pre><code>{
    <span class="attribute">SOME_USEFUL_CONST</span>: <span class="string">'SOME_USEFUL_CONST'</span>,
    <span class="attribute">ANOTHER_USEFUL_CONST</span>: <span class="string">'ANOTHER_USEFUL_CONST'</span>
}
</code></pre><h2 id="When_should_I_use_a_key_mirror?">When should I use a key mirror?</h2><p>Key mirrors are useful for a number of reasons of course, so here are some use-cases where key mirrors will help you out:</p>
<ul>
<li>You want your IDE to auto-complete string literals that are common in your code. Introducing key mirrors for this purpose will help you avoid nasty typos that are inevitable, especially if you are working with a team of developers.</li>
</ul>
<ul>
<li>You find yourself typing multiple string literals more than once, and they serve a common purpose.</li>
</ul>
<ul>
<li><p>You want to easily check that a value is ‘legal’.</p>
<pre><code><span class="keyword">var</span> rgb = {red: <span class="string">'red'</span>, green: <span class="string">'green'</span>, blue: <span class="string">'blue'</span>};
<span class="keyword">var</span> colour = rgb.red;
<span class="keyword">var</span> legalValue = !!rgb[<span class="keyword">value</span>];
</code></pre></li>
</ul>
<h2 id="How_do_I_create_a_key_mirror?">How do I create a key mirror?</h2><p>As always, there is more than one solution. So here are a few… take your pick!</p>
<h3 id="Using_React">Using React</h3><p>The React library comes packaged with a key mirror helper module, <code>react/addons/keyMirror</code>.</p>
<pre><code><span class="reserved">var</span> keyMirror = <span class="built_in">require</span>(<span class="string">'react/utils/keyMirror'</span>);
<span class="reserved">var</span> consts = {
    <span class="attribute">FIRST_KEY</span>: <span class="literal">true</span>,
    <span class="attribute">SECOND_KEY</span>: <span class="literal">true</span>
};
<span class="reserved">var</span> mirror = keyMirror(consts);
<span class="built_in">console</span>.log(mirror); <span class="regexp">//</span> {<span class="attribute">FIRST_KEY</span>: <span class="string">'FIRST_KEY'</span>, <span class="attribute">SECOND_KEY</span>: <span class="string">'SECOND_KEY'</span>}
</code></pre><p>But if you aren’t using React, it’s easy to build your own:</p>
<h3 id="Using_lodash:">Using lodash:</h3><p>We can use the <code>_.reduce</code> method to take any Object or Array and create a key mirror from it. In the case of an Array, we take each element and use its value as the key and value. For an Object we do the same by first using the <code>Object.keys</code> method, which (unsurprisngly) returns an Array of an object’s keys.</p>
<pre><code><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);

<span class="function"><span class="keyword">function</span> <span class="title">keyMirror</span>(<span class="params">keys</span>) </span>{
    keys = <span class="built_in">Array</span>.isArray(keys) ? keys : <span class="built_in">Object</span>.keys(keys);
    <span class="keyword">return</span> _.reduce(keys, <span class="function"><span class="keyword">function</span>(<span class="params">res, v</span>) </span>{
        res[v] = v;
        <span class="keyword">return</span> res;
    }, {});
}
</code></pre><h3 id="Using_JavaScript:">Using JavaScript:</h3><p>Or if you want to avoid using any libraries, perhaps as you think the other methods are overkill, then create your own from scratch:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">keyMirror</span><span class="params">(keys)</span> {</span>
    keys = Array.isArray<span class="params">(keys)</span> ? keys : Object.keys<span class="params">(keys)</span>;
    var <span class="built_in">mirror</span> = {};
    keys.forEach<span class="params">(v =&gt; mirror[v] = v)</span>;
    return <span class="built_in">mirror</span>;
}
</code></pre><h3 id="Using_npm:">Using npm:</h3><p>Check out one of the many <a href="https://www.npmjs.com/search?q=keymirror" target="_blank" rel="external">key mirror libraries published on <code>npm</code></a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It is very likely that in your day-to-day JavaScript programming you will have encountered the problem that is ‘how can I maintain a coll]]>
    </summary>
    
      <category term="javascript" scheme="sdgluck.github.io/tags/javascript/"/>
    
      <category term="key mirror" scheme="sdgluck.github.io/tags/key-mirror/"/>
    
      <category term="node" scheme="sdgluck.github.io/tags/node/"/>
    
  </entry>
  
</feed>