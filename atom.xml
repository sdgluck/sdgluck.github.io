<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Diary of a Chump]]></title>
  <subtitle><![CDATA[sdgluck's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="sdgluck.github.io//"/>
  <updated>2015-08-14T14:46:10.763Z</updated>
  <id>sdgluck.github.io//</id>
  
  <author>
    <name><![CDATA[Sam Gluck]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[The CSS Grid Layout]]></title>
    <link href="sdgluck.github.io/2015/08/12/css-grid-layout/"/>
    <id>sdgluck.github.io/2015/08/12/css-grid-layout/</id>
    <published>2015-08-12T16:16:00.000Z</published>
    <updated>2015-08-14T14:46:10.763Z</updated>
    <content type="html"><![CDATA[<p>The CSS Grid Layout, another ship in what seems to be a turbulent sea of layout specifications, but which appears to offer a complete solution to the problem of ‘hacky’ CSS layouts. If you are still using floats you’re standing on a sinking ship, if you’ll pardon the pun. It will do the web development community a great deal of good to have a layout spec that is designed for modern interfaces and I am waiting in anticipation for browser vendors to introduce it into their software.</p>
<p><em>Note: I have not made considerations for vendor-specific implementations of the CSS Grid Layout in this article, but as you will see on <a href="http://caniuse.com/#search=grid" target="_blank" rel="external">caniuse.com</a>, IE is the only browser with support at the moment. Chrome supports the CSS Grid Layout with an <a href="https://developers.google.com/web/updates/2014/03/Get-on-the-CSS-Grid" target="_blank" rel="external">experimental flag</a>.</em></p>
<h2 id="What_is_the_CSS_Grid_Layout?">What is the CSS Grid Layout?</h2><p>A way to organise content within a document on a webpage. As with all CSS layouts the Grid layout is defined as a value of the <code>display</code> property on an element, which will designate it as a Grid ‘container’. There are grid property values that accomodate both block- and inline-level container elements, for whichever is the appropriate use-case:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.block-grid-container &#123;</span><br><span class="line">    display: grid; // block grid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inline-grid-container &#123;</span><br><span class="line">    display: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>But of course this alone won’t suffice. We need to give the grid some <em>definition</em>, a structure that will allow us to position children within it. With a Grid this means columns and rows, and in this way we can think of a Grid like an HTML <code>&lt;table&gt;</code> and its accompanying <code>display: table</code> layout, however a Grid is leaps and bounds more flexible because it’s designed for interfaces, unlike tables (and floats!). Like floats however, all structure of a Grid is defined in your stylesheet, just where it belongs.</p>
<h3 id="Container_properties">Container properties</h3><p>So what can we do with a Grid container? Let’s take a look at the available properties:</p>
<h5 id="grid-template-rows"><code>grid-template-rows</code></h5><p>The number of rows in the grid. But be aware that to use get the best out of Grids, you want to give it more than just a whole number! (See <em>flexible lengths</em> below.)</p>
<pre><code>grid-<span class="keyword">template</span>-rows: <span class="number">1</span>;
</code></pre><h5 id="grid-template-columns"><code>grid-template-columns</code></h5><p>The number of columns in the grid</p>
<h5 id="grid-template-areas"><code>grid-template-areas</code></h5><p>Create named areas within the layout using a string literal for each row and a word for each area or ‘grid item’</p>
<h5 id="grid-template"><code>grid-template</code></h5><p>Define values for both <code>grid-template-columns</code> and <code>grid-template-rows</code> properties.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#container</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">grid-template-columns</span>:<span class="value"> auto <span class="number">1</span>fr auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">grid-template-rows</span>:<span class="value"> auto <span class="number">1</span>f</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">grid-template</span>:<span class="value"> auto <span class="number">1</span>fr auto / auto <span class="number">1</span>fr</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Flexible_length">Flexible length</h3><p>The Grid layout introduces a new measurement called <em>flexible length</em>, whose abbreviated unit is <em>fr</em>. It represents a ‘fraction of the free space within the container’. But there are some caveats as not all grid items require their size to be defined by a <em>flexible length</em>. </p>
<h3 id="Child_properties">Child properties</h3><h3 id="Good_to_know">Good to know</h3><p>Straight from <a href="http://www.w3.org/TR/css3-grid-layout/" target="_blank" rel="external">the specification</a>, here are some useful tidbits that will keep you from scratching your head in confusion:</p>
<ul>
<li>You cannot <code>float</code> or <code>clear</code> a Grid item.</li>
<li>You cannot <code>vertical-align</code> a Grid item.</li>
<li><code>::first-line</code> and <code>::first-letter</code> pseudo-elements do not apply to Grid containers, and grid containers do not contribute a first formatted line or first letter to their ancestors.</li>
<li>A Grid container is <em>positioned according to its context</em> and <em>sized according to its contents</em>, which means that it will be as large as its rows and columns combined.</li>
<li>Grid items are stacked by their natural order within the document or can be given an explicit z-index using the <code>z-index</code> property.</li>
<li>Just like with other layout elements, a Grid item whose overflow property is defined as <code>overflow: visible</code> or similar will expand to contain its contents.</li>
</ul>
<h2 id="Advantages_over_the_Flex_Layout">Advantages over the Flex Layout</h2><h2 id="Disadvantages_over_the_Flex_layout">Disadvantages over the Flex layout</h2><p>The CSS Grid Layout is still a working draft and so browsers implementing it are doing so for the convenience of giving developers an opportunity to try it out, which unfortunately means that using it in production is currently not an option. The Flex layout however is available to use in production as of six months ago, which gives it a big head start. What can the Flex layout do that the Grid layout can’t?</p>
<ul>
<li><h2 id="It’s_a_wrap!">It’s a wrap!</h2><p>That ends our discussion of the CSS Grid Layout for now. Eveything else you need to know can be conveniently found on the <a href="http://www.w3.org/TR/css3-grid-layout/" target="_blank" rel="external">w3c’s Grid Layout spec webpage</a>. It is still a working draft and being updated regularly, so check back often to keep yourself above water.</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>The CSS Grid Layout, another ship in what seems to be a turbulent sea of layout specifications, but which appears to offer a complete sol]]>
    </summary>
    
      <category term="css" scheme="sdgluck.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[What is a Key Mirror?]]></title>
    <link href="sdgluck.github.io/2015/08/12/key-mirrors/"/>
    <id>sdgluck.github.io/2015/08/12/key-mirrors/</id>
    <published>2015-08-12T16:16:00.000Z</published>
    <updated>2015-08-16T12:02:15.539Z</updated>
    <content type="html"><![CDATA[<p>It is very likely that in your day-to-day JavaScript programming you will have encountered the problem that is ‘how can I maintain a collection of constants in the form of string literals, and reference these strings by a name?’ If you have posed this question, and are still waiting for an answer, then I am happy to give it to you: key mirrors.</p>
<h2 id="What_is_a_key_mirror?">What is a key mirror?</h2><p>A key mirror is an object where for each property, the key is the same as the value. They are most useful as a collection of constants that ‘give back’ their own definition, and many languages already provide an integrated solution for this behaviour in the form of an <a href="https://en.wikipedia.org/wiki/Enumerated_type" target="_blank" rel="external">enum</a>. Unfortunately, JavaScript doesn’t… so we use ‘key mirrors’ instead.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">SOME_USEFUL_CONST</span>: <span class="string">'SOME_USEFUL_CONST'</span>,</span><br><span class="line">    <span class="attribute">ANOTHER_USEFUL_CONST</span>: <span class="string">'ANOTHER_USEFUL_CONST'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="When_should_I_use_a_key_mirror?">When should I use a key mirror?</h2><p>Key mirrors are useful for a number of reasons of course, so here are some use-cases where key mirrors will help you out:</p>
<p><strong>Auto-completion:</strong> You want your IDE to auto-complete string literals that are common in your code. Introducing key mirrors for this purpose will help you avoid nasty typos that are otherwise inevitable, especially if you are working with a team of developers.</p>
<p><strong>Time-saving and consolidation:</strong> You find yourself typing multiple string literals more than once, and they serve a common purpose.</p>
<p><strong>Check for legality of a value:</strong> You want to easily check that a value is ‘legal’ by using that value as a key in the keyMirror.</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var COLOURS = &#123;<span class="built_in">red</span>: <span class="string">'red'</span>, <span class="built_in">green</span>: <span class="string">'green'</span>, <span class="built_in">blue</span>: <span class="string">'blue'</span>&#125;;</span><br><span class="line">var colour = COLOURS.<span class="built_in">red</span>;</span><br><span class="line">var legalValue = !!COLOURS[colour];</span><br></pre></td></tr></table></figure>
<p><span style="height: 8px;"></span><br><strong>Track original key</strong> <a href="https://sdgluck.github.io/2015/08/12/key-mirrors/#comment-2196343745"><em>(From Jordan, Pioneering Inventor of the keyMirror)</em></a>: don’t forget the benefit of being able to track the original <em>key</em> that was used to generate the value in logs or debugging. If COLOURS is a keyMirror, then the value tracks its original key name, whereas if it’s a mapping from keys to integers, you have to consult some far removed piece of code to recall what original concept that number was mapped from.</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(val)</span> &#123;</span></span><br><span class="line">    <span class="comment">// What is val?</span></span><br><span class="line">    console.<span class="built_in">log</span><span class="params">(val)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething<span class="params">(COLOURS.red)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="How_do_I_create_a_key_mirror?">How do I create a key mirror?</h2><p>As always, there is more than one solution. So here are a few… take your pick!</p>
<h3 id="Using_React">Using React</h3><p>The React library comes packaged with a key mirror helper module, <code>react/utils/keyMirror</code>.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> keyMirror = <span class="built_in">require</span>(<span class="string">'react/utils/keyMirror'</span>);</span><br><span class="line"><span class="reserved">var</span> COLOURS = &#123;</span><br><span class="line">    <span class="attribute">red</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attribute">green</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attribute">blue</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="reserved">var</span> mirror = keyMirror(COLOURS);</span><br><span class="line"><span class="built_in">console</span>.log(mirror); <span class="regexp">//</span> &#123;<span class="attribute">red</span>: <span class="string">'red'</span>, <span class="attribute">green</span>: <span class="string">'green'</span>, <span class="attribute">blue</span>: <span class="string">'blue'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>But if you aren’t using React, it’s easy to build your own:</p>
<h3 id="Using_lodash:">Using lodash:</h3><p>We can use the <code>_.reduce</code> method to take any Object or Array and create a key mirror from it. In the case of an Array, we take each element and use its value as the key and value. For an Object we do the same by first using the <code>Object.keys</code> method, which (unsurprisngly) returns an Array of an object’s keys.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyMirror</span>(<span class="params">keys</span>) </span>&#123;</span><br><span class="line">    keys = <span class="built_in">Array</span>.isArray(keys) ? keys : <span class="built_in">Object</span>.keys(keys);</span><br><span class="line">    <span class="keyword">return</span> _.reduce(keys, <span class="function"><span class="keyword">function</span>(<span class="params">res, v</span>) </span>&#123;</span><br><span class="line">        res[v] = v;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Using_JavaScript:">Using JavaScript:</h3><p>Or if you want to avoid using any libraries, perhaps as you think the other methods are overkill, then create your own from scratch:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyMirror</span><span class="params">(keys)</span> &#123;</span></span><br><span class="line">    keys = Array.isArray<span class="params">(keys)</span> ? keys : Object.keys<span class="params">(keys)</span>;</span><br><span class="line">    var <span class="built_in">mirror</span> = &#123;&#125;;</span><br><span class="line">    keys.forEach<span class="params">(v =&gt; mirror[v] = v)</span>;</span><br><span class="line">    return <span class="built_in">mirror</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Using_npm:">Using npm:</h3><p>Check out one of the many <a href="https://www.npmjs.com/search?q=keymirror" target="_blank" rel="external">key mirror libraries published on <code>npm</code></a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It is very likely that in your day-to-day JavaScript programming you will have encountered the problem that is ‘how can I maintain a coll]]>
    </summary>
    
      <category term="javascript" scheme="sdgluck.github.io/tags/javascript/"/>
    
      <category term="key mirror" scheme="sdgluck.github.io/tags/key-mirror/"/>
    
      <category term="node" scheme="sdgluck.github.io/tags/node/"/>
    
  </entry>
  
</feed>